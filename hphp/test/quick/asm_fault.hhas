# Some tests for catch regions.

.main {
  NullUninit
  NullUninit
  NullUninit
  FPushFuncD 0 "main"
  FCall <> 0 1 "" - "" ""
  PopC
  Int 1
  RetC
}

.function throw_stuff($msg) {
  .try {
    String "about to throw: "
    CGetL $msg
    Concat
    String "\n"
    Concat
    Print
    PopC

    NewObjD "Exception"
    Dup
    NullUninit
    NullUninit
    CGetL $msg
    FPushCtor 1
    FCall <> 1 1 "" - "" ""
    PopC
    Throw
  } .catch {
    String "throw_stuff's exception handler ...\n"
    Print
    PopC
    Throw
  }
}

.function foo() {
  String "testing catch region\n"
  Print
  PopC

  .try {
    String "In region\n"
    Print
    PopC

    NullUninit
    NullUninit
    NullUninit
    String "the message"
    FPushFuncD 1 "throw_stuff"
    FCall <> 1 1 "" - "" ""
    PopC

    String "unreached\n"
    Print
    PopC
    True
    RetC
  } .catch {
    String "In foo's exception handler\n"
    Print
    PopC
    Throw
  }
}

.class One extends Exception {
}
.class Two extends Exception {
}
.class Three extends Exception {
}

.function throw_various() {
           Int 0
           SetL $counter
           PopC

repeat:
           .try {
             CGetL $counter
             Switch Unbounded 0 <make_one make_two make_three>

make_one:    NewObjD "One"
             Dup
             NullUninit
             NullUninit
             FPushCtor 0
             FCall <> 0 1 "" - "" ""
             PopC
             Throw
make_two:    NewObjD "Two"
             Dup
             NullUninit
             NullUninit
             FPushCtor 0
             FCall <> 0 1 "" - "" ""
             PopC
             Throw
make_three:  NewObjD "Three"
             Dup
             NullUninit
             NullUninit
             String "third exception from throw_various"
             FPushCtor 1
             FCall <> 1 1 "" - "" ""
             PopC
             Throw
           } .catch {
             Dup
             InstanceOfD "One"
             JmpNZ on_one
             Dup
             InstanceOfD "Two"
             JmpNZ on_two
             Dup
             InstanceOfD "Three"
             JmpNZ on_three
             Throw
on_one:      String "one\n"
             Print
             PopC
             Int 1
             SetL $counter
             PopC
             PopC
             Jmp repeat
on_two:      PopC
             String "two\n"
             Print
             PopC
             Int 2
             SetL $counter
             PopC
             Jmp repeat
on_three:    String "three\n"
             Print
             PopC
             Throw
           }
}

.function main() {
         False
         SetL $ever_caught
         PopC
         NullUninit
         NullUninit
         NullUninit
         String "foo"

resume:  .try {
           FPushFunc 0
           FCall <> 0 1 "" - "" ""
           PopC
           Jmp resume2
         } .catch {
           SetL $ex
           PopC
           String "top-level catch handler got: "
           PushL $ex
           NullUninit
           NullUninit
           FPushObjMethodD 0 "getMessage" NullThrows
           FCall <> 0 1 "" - "" ""
           Concat
           String "\n"
           Concat
           Print
           PopC
           # This might be illegal hhbc?
           CGetL $ever_caught
           True
           SetL $ever_caught
           PopC
           JmpNZ resume2
           NullUninit
           NullUninit
           NullUninit
           String "throw_various"
           Jmp resume
         }

resume2: True
         RetC
}
